!function (s, c, i) { "use strict"; var a, n, r = c.blazy || {}, t = (c.Ajax || {}).prototype; t && (t.success = (n = t.success, function (t, o) { var e; return r.init && (e = r.options, clearTimeout(a), a = setTimeout(function () { s.find(i, s.selector(e, !0)) && (s.once.removeSafely("b-root", "body", i), c.attachBehaviors(i.body)) }, 100)), n.apply(this, arguments) })) }(dBlazy, Drupal, this.document);
;
(function ($, drupalSettings) {
  // Store the original beforeSerialize, as we want to continue using
  // it after we've overridden it.
  Drupal.Ajax.prototype.originalBeforeSerialize = Drupal.Ajax.prototype.beforeSerialize;

  /**
   * Override core's beforeSerialize.
   *
   * We switch to using GET if this is for an ajax View.
   * We also avoid adding ajax_html_id and ajax_page_state.
   * (This happens in core's beforeSerialize).
   */
  Drupal.Ajax.prototype.beforeSerialize = function (element, options) {

    // If this is for a view, switch to GET.
    if (options.url &&
      options.url.indexOf('/views/ajax') !== -1 &&
      drupalSettings.viewsAjaxGet &&
      typeof drupalSettings.viewsAjaxGet[options.data.view_name] !== 'undefined') {

      // @See Drupal.Ajax.prototype.beforeSerialize
      if (this.form) {
        var settings = this.settings || drupalSettings;
        Drupal.detachBehaviors(this.form, settings, 'serialize');
      }

      options.type = 'GET';

      // Reset URL to ensure params in current url and params from form
      // don't conflict.
      options.url = Drupal.url('views/ajax');

      return;
    }

    return this.originalBeforeSerialize(element, options);
  };

})(jQuery, drupalSettings);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, drupalSettings) {
  Drupal.Views = {};
  Drupal.Views.parseQueryString = function (query) {
    var args = {};
    var pos = query.indexOf('?');
    if (pos !== -1) {
      query = query.substring(pos + 1);
    }
    var pair;
    var pairs = query.split('&');
    for (var i = 0; i < pairs.length; i++) {
      pair = pairs[i].split('=');
      if (pair[0] !== 'q' && pair[1]) {
        args[decodeURIComponent(pair[0].replace(/\+/g, ' '))] = decodeURIComponent(pair[1].replace(/\+/g, ' '));
      }
    }
    return args;
  };
  Drupal.Views.parseViewArgs = function (href, viewPath) {
    var returnObj = {};
    var path = Drupal.Views.getPath(href);
    var viewHref = Drupal.url(viewPath).substring(drupalSettings.path.baseUrl.length);
    if (viewHref && path.substring(0, viewHref.length + 1) === "".concat(viewHref, "/")) {
      returnObj.view_args = decodeURIComponent(path.substring(viewHref.length + 1, path.length));
      returnObj.view_path = path;
    }
    return returnObj;
  };
  Drupal.Views.pathPortion = function (href) {
    var protocol = window.location.protocol;
    if (href.substring(0, protocol.length) === protocol) {
      href = href.substring(href.indexOf('/', protocol.length + 2));
    }
    return href;
  };
  Drupal.Views.getPath = function (href) {
    href = Drupal.Views.pathPortion(href);
    href = href.substring(drupalSettings.path.baseUrl.length, href.length);
    if (href.substring(0, 3) === '?q=') {
      href = href.substring(3, href.length);
    }
    var chars = ['#', '?', '&'];
    for (var i = 0; i < chars.length; i++) {
      if (href.indexOf(chars[i]) > -1) {
        href = href.substr(0, href.indexOf(chars[i]));
      }
    }
    return href;
  };
})(jQuery, Drupal, drupalSettings);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, drupalSettings) {
  Drupal.behaviors.ViewsAjaxView = {};
  Drupal.behaviors.ViewsAjaxView.attach = function (context, settings) {
    if (settings && settings.views && settings.views.ajaxViews) {
      var ajaxViews = settings.views.ajaxViews;
      Object.keys(ajaxViews || {}).forEach(function (i) {
        Drupal.views.instances[i] = new Drupal.views.ajaxView(ajaxViews[i]);
      });
    }
  };
  Drupal.behaviors.ViewsAjaxView.detach = function (context, settings, trigger) {
    if (trigger === 'unload') {
      if (settings && settings.views && settings.views.ajaxViews) {
        var ajaxViews = settings.views.ajaxViews;
        Object.keys(ajaxViews || {}).forEach(function (i) {
          var selector = ".js-view-dom-id-".concat(ajaxViews[i].view_dom_id);
          if ($(selector, context).length) {
            delete Drupal.views.instances[i];
            delete settings.views.ajaxViews[i];
          }
        });
      }
    }
  };
  Drupal.views = {};
  Drupal.views.instances = {};
  Drupal.views.ajaxView = function (settings) {
    var selector = ".js-view-dom-id-".concat(settings.view_dom_id);
    this.$view = $(selector);
    var ajaxPath = drupalSettings.views.ajax_path;
    if (ajaxPath.constructor.toString().indexOf('Array') !== -1) {
      ajaxPath = ajaxPath[0];
    }
    var queryString = window.location.search || '';
    if (queryString !== '') {
      queryString = queryString.slice(1).replace(/q=[^&]+&?|&?render=[^&]+/, '');
      if (queryString !== '') {
        queryString = (/\?/.test(ajaxPath) ? '&' : '?') + queryString;
      }
    }
    this.element_settings = {
      url: ajaxPath + queryString,
      submit: settings,
      setClick: true,
      event: 'click',
      selector: selector,
      progress: {
        type: 'fullscreen'
      }
    };
    this.settings = settings;
    this.$exposed_form = $("form#views-exposed-form-".concat(settings.view_name.replace(/_/g, '-'), "-").concat(settings.view_display_id.replace(/_/g, '-')));
    once('exposed-form', this.$exposed_form).forEach($.proxy(this.attachExposedFormAjax, this));
    once('ajax-pager', this.$view.filter($.proxy(this.filterNestedViews, this))).forEach($.proxy(this.attachPagerAjax, this));
    var selfSettings = $.extend({}, this.element_settings, {
      event: 'RefreshView',
      base: this.selector,
      element: this.$view.get(0)
    });
    this.refreshViewAjax = Drupal.ajax(selfSettings);
  };
  Drupal.views.ajaxView.prototype.attachExposedFormAjax = function () {
    var that = this;
    this.exposedFormAjax = [];
    $('input[type=submit], button[type=submit], input[type=image]', this.$exposed_form).not('[data-drupal-selector=edit-reset]').each(function (index) {
      var selfSettings = $.extend({}, that.element_settings, {
        base: $(this).attr('id'),
        element: this
      });
      that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
    });
  };
  Drupal.views.ajaxView.prototype.filterNestedViews = function () {
    return !this.$view.parents('.view').length;
  };
  Drupal.views.ajaxView.prototype.attachPagerAjax = function () {
    this.$view.find('ul.js-pager__items > li > a, th.views-field a, .attachment .views-summary a').each($.proxy(this.attachPagerLinkAjax, this));
  };
  Drupal.views.ajaxView.prototype.attachPagerLinkAjax = function (id, link) {
    var $link = $(link);
    var viewData = {};
    var href = $link.attr('href');
    $.extend(viewData, this.settings, Drupal.Views.parseQueryString(href), Drupal.Views.parseViewArgs(href, this.settings.view_base_path));
    var selfSettings = $.extend({}, this.element_settings, {
      submit: viewData,
      base: false,
      element: link
    });
    this.pagerAjax = Drupal.ajax(selfSettings);
  };
  Drupal.AjaxCommands.prototype.viewsScrollTop = function (ajax, response) {
    var offset = $(response.selector).offset();
    var scrollTarget = response.selector;
    while ($(scrollTarget).scrollTop() === 0 && $(scrollTarget).parent()) {
      scrollTarget = $(scrollTarget).parent();
    }
    if (offset.top - 10 < $(scrollTarget).scrollTop()) {
      $(scrollTarget).animate({
        scrollTop: offset.top - 10
      }, 500);
    }
  };
})(jQuery, Drupal, drupalSettings);;
/**
 * @file
 * better_exposed_filters.js
 *
 * Provides some client-side functionality for the Better Exposed Filters module.
 */

(function ($, Drupal, drupalSettings) {
  Drupal.behaviors.betterExposedFilters = {
    attach: function (context, settings) {
      // Add highlight class to checked checkboxes for better theming.
      $('.bef-tree input[type=checkbox], .bef-checkboxes input[type=checkbox]')
        // Highlight newly selected checkboxes.
        .change(function () {
          _bef_highlight(this, context);
        })
        .filter(':checked').closest('.form-item', context).addClass('highlight');
    }
  };

  /*
   * Helper functions
   */

  /**
   * Adds/Removes the highlight class from the form-item div as appropriate.
   */
  function _bef_highlight(elem, context) {
    $elem = $(elem, context);
    $elem.attr('checked')
      ? $elem.closest('.form-item', context).addClass('highlight')
      : $elem.closest('.form-item', context).removeClass('highlight');
  }

})(jQuery, Drupal, drupalSettings);
;
/**
 * @file
 * auto_submit.js
 *
 * Provides a "form auto-submit" feature for the Better Exposed Filters module.
 */

(function ($, Drupal, once) {

  /**
   * To make a form auto submit, all you have to do is 3 things:.
   *
   * Use the "better_exposed_filters/auto_submit" js library.
   *
   * On gadgets you want to auto-submit when changed, add the
   * data-bef-auto-submit attribute. With FAPI, add:
   * @code
   *  '#attributes' => array('data-bef-auto-submit' => ''),
   * @endcode
   *
   * If you want to have auto-submit for every form element, add the
   * data-bef-auto-submit-full-form to the form. With FAPI, add:
   * @code
   *   '#attributes' => array('data-bef-auto-submit-full-form' => ''),
   * @endcode
   *
   * If you want to exclude a field from the bef-auto-submit-full-form auto
   * submission, add an attribute of data-bef-auto-submit-exclude to the form
   * element. With FAPI, add:
   * @code
   *   '#attributes' => array('data-bef-auto-submit-exclude' => ''),
   * @endcode
   *
   * Finally, you have to identify which button you want clicked for autosubmit.
   * The behavior of this button will be honored if it's ajax or not:
   * @code
   *  '#attributes' => array('data-bef-auto-submit-click' => ''),
   * @endcode
   *
   * Currently only 'select', 'radio', 'checkbox' and 'textfield' types are
   * supported. We probably could use additional support for HTML5 input types.
   */
  Drupal.behaviors.betterExposedFiltersAutoSubmit = {
    attach: function (context) {
      // When exposed as a block, the form #attributes are moved from the form
      // to the block element, thus the second selector.
      // @see \Drupal\block\BlockViewBuilder::preRender
      var selectors = 'form[data-bef-auto-submit-full-form], [data-bef-auto-submit-full-form] form, [data-bef-auto-submit]';

      // The change event bubbles so we only need to bind it to the outer form
      // in case of a full form, or a single element when specified explicitly.
      $(selectors, context).addBack(selectors).each(function (i, e) {
        // Store the current form.
        var $form = $(e);

        // Retrieve the autosubmit delay for this particular form.
        var autoSubmitDelay = $form.data('bef-auto-submit-delay') || 500;

        // Attach event listeners.
        $(once('bef-auto-submit', $form))
          // On change, trigger the submit immediately.
          .on('change', triggerSubmit)
          // On keyup, wait for a specified number of milliseconds before
          // triggering autosubmit. Each new keyup event resets the timer.
          .on('keyup', Drupal.debounce(triggerSubmit, autoSubmitDelay));
      });

      /**
       * Triggers form autosubmit when conditions are right.
       *
       * - Checks first that the element that was the target of the triggering
       *   event is `:text` or `textarea`, but is not `.hasDatePicker`.
       * - Checks that the keycode of the keyup was not in the list of ignored
       *   keys (navigation keys etc).
       *
       * @param {object} e - The triggering event.
       */
      function triggerSubmit(e) {
        // e.keyCode: key.
        var ignoredKeyCodes = [
          16, // Shift.
          17, // Ctrl.
          18, // Alt.
          20, // Caps lock.
          33, // Page up.
          34, // Page down.
          35, // End.
          36, // Home.
          37, // Left arrow.
          38, // Up arrow.
          39, // Right arrow.
          40, // Down arrow.
          9, // Tab.
          13, // Enter.
          27  // Esc.
        ];

        // Triggering element.
        var $target = $(e.target);
        var $submit = $target.closest('form').find('[data-bef-auto-submit-click]');

        // Don't submit on changes to excluded elements or a submit element.
        if ($target.is('[data-bef-auto-submit-exclude], :submit')) {
          return true;
        }

        // Submit only if this is a non-datepicker textfield and if the
        // incoming keycode is not one of the excluded values.
        if (
          $target.is(':text:not(.hasDatepicker), textarea')
          && $.inArray(e.keyCode, ignoredKeyCodes) === -1
        ) {
          $submit.click();
        }
        // Only trigger submit if a change was the trigger (no keyup).
        else if (e.type === 'change') {
          $submit.click();
        }
      }
    }
  };

}(jQuery, Drupal, once));
;
/**
 * @file
 * bef_select_all_none.js
 *
 * Adds select all/none toggle functionality to an exposed filter.
 */

(function ($, once) {
  Drupal.behaviors.betterExposedFiltersSelectAllNone = {
    attach: function (context) {
      /*
       * Add Select all/none links to specified checkboxes
       */
      var selected = $('.form-checkboxes.bef-select-all-none:not(.bef-processed)');
      if (selected.length) {
        var selAll = Drupal.t('Select All');
        var selNone = Drupal.t('Select None');

        // Set up a prototype link and event handlers.
        var link = $('<a class="bef-toggle bef-toggle--select-all" href="#">' + selAll + '</a>');
        link.click(function (event) {
          // Don't actually follow the link...
          event.preventDefault();
          event.stopPropagation();

          if (selAll === $(this).text()) {
            // Select all the checkboxes.
            $(this)
              .html(selNone)
              .removeClass('bef-toggle--select-all')
              .addClass('bef-toggle--deselect-all')
              .siblings('.bef-select-all-none, .bef-tree')
              .find('input:checkbox').each(function () {
                $(this).prop('checked', true);
                // @TODO:
                // _bef_highlight(this, context);
              })
              .end()

              // attr() doesn't trigger a change event, so we do it ourselves. But just on
              // one checkbox otherwise we have many spinning cursors.
              .find('input[type=checkbox]:first').change();
          }
          else {
            // Unselect all the checkboxes.
            $(this)
              .html(selAll)
              .removeClass('bef-toggle--deselect-all')
              .addClass('bef-toggle--select-all')
              .siblings('.bef-select-all-none, .bef-tree')
              .find('input:checkbox').each(function () {
                $(this).prop('checked', false);
                // @TODO:
                // _bef_highlight(this, context);
              })
              .end()

              // attr() doesn't trigger a change event, so we do it ourselves. But just on
              // one checkbox otherwise we have many spinning cursors.
              .find('input[type=checkbox]:first').change();
          }
        });

        // Add link to the page for each set of checkboxes.
        selected
          .addClass('bef-processed')
          .each(function (index) {
            // Clone the link prototype and insert into the DOM.
            var newLink = link.clone(true);

            newLink.insertBefore($(this));

            // Show select all/none when single checkbox is checked/unchecked
            $('input:checkbox', this).click(function () {
              if ($(this).prop("checked") === true) {
                newLink.text(selNone);
              }
              else if ($(this).prop("checked") === false) {
                newLink.text(selAll);
              }
            });

            // If all checkboxes are already checked by default then switch to Select None.
            if ($('input:checkbox:checked', this).length === $('input:checkbox', this).length) {
              newLink.text(selNone).removeClass('bef-toggle--select-all').addClass('bef-toggle--deselect-all');
            }
          });
      }

      // @TODO:
      // Add highlight class to checked checkboxes for better theming
      // $('.bef-tree input[type="checkbox"], .bef-checkboxes input[type="checkbox"]')
      // Highlight newly selected checkboxes
      //  .change(function () {
      //    _bef_highlight(this, context);
      //  })
      //  .filter(':checked').closest('.form-item', context).addClass('highlight')
      // ;
      // @TODO: Put this somewhere else...
      // Check for and initialize datepickers
      // if (Drupal.settings.better_exposed_filters.datepicker) {
      //  // Note: JavaScript does not treat "" as null
      //  if (Drupal.settings.better_exposed_filters.datepicker_options.dateformat) {
      //    $('.bef-datepicker').datepicker({
      //      dateFormat: Drupal.settings.better_exposed_filters.datepicker_options.dateformat
      //    });
      //  }
      //  else {
      //    $('.bef-datepicker').datepicker();
      //  }
      // }
    }                   // attach: function() {
  };                    // Drupal.behaviors.better_exposed_filters = {.

  Drupal.behaviors.betterExposedFiltersAllNoneNested = {
    attach: function (context, settings) {
      $(once('bef-all-none-nested', '.bef-select-all-none-nested ul li')).each(function () {
        var $this = $(this);
        // Check/uncheck child terms along with their parent.
        $this.find('input:checkbox:first').change(function () {
          $(this).closest('li').find('ul li input:checkbox').prop('checked', this.checked);
        });

        // When a child term is checked or unchecked, set the parent term's
        // status as needed.
        $this.find('ul input:checkbox').change(function () {
          // Determine the number of unchecked sibling checkboxes.
          var $this = $(this);
          var uncheckedSiblings = $this.closest('li').siblings('li').find('> div > input:checkbox:not(:checked)').length;

          // If this term or any siblings are unchecked, uncheck the parent and
          // all ancestors.
          if (uncheckedSiblings || !this.checked) {
            $this.parents('ul').siblings('div').find('input:checkbox').prop('checked', false);
          }

          // If this and all sibling terms are checked, check the parent. Then
          // trigger the parent's change event to see if that change affects the
          // grandparent's checked state.
          if (this.checked && !uncheckedSiblings) {
            $(this).closest('ul').closest('li').find('input:checkbox:first').prop('checked', true).change();
          }
        });
      });
    }
  };

})(jQuery, once);
;
(function ($) {
  'use strict';
  $(document).ready(function () {
    function sectionRed1() {
      if ($(".section--red01").length > 0) {
        var win_viewport = $(window).scrollTop() + 60;
        var section__red = $(".section--red01");
        var doc_viewport = section__red.offset();
        doc_viewport.bottom = doc_viewport.top + section__red.outerHeight();
        if (win_viewport > doc_viewport.top && win_viewport < doc_viewport.bottom) {
          $('html').addClass("has-red-nav1");
        } else {
          $('html').removeClass("has-red-nav1");
        }
      }
    }
    function sectionDefault1() {
      if ($(".section--default").length > 0) {
        var win_viewport = $(window).scrollTop();
        var section__red = $(".section--default");
        var doc_viewport = section__red.offset();
        doc_viewport.bottom = doc_viewport.top + section__red.outerHeight();
        if (win_viewport + 200 > doc_viewport.top && win_viewport < doc_viewport.bottom) {
          $('html').removeClass("has-red-nav1");
        }
      }
    }
    sectionRed1();
    sectionDefault1();
    window.addEventListener("scroll", sectionRed1);
    window.addEventListener("scroll", sectionDefault1);
    $(document).ready(function () {

      $('.select-dropdown__button').on('click', function (event) {
        event.stopPropagation()
        $('.select-dropdown__list').toggleClass('active');
        $('.select-dropdown__list1').removeClass('active');
        $('.select-dropdown__list2').removeClass('active');
        $('.select-dropdown__list3').removeClass('active');

      });
      $(document).on('click', function () {
        $('[class*=select-dropdown__list]').removeClass('active');
        //$('.select-dropdown__list1').removeClass('active');

      });
      $(document).on("click", ".select-dropdown__list-item", function () {
        var itemValue = $(this).data('value');

        $('.select-dropdown__button span').text($(this).text()).parent().attr('data-value', itemValue);
        $('.select-dropdown__list').toggleClass('active');
      });

      $('.select-dropdown__button1').on('click', function (event) {
        event.stopPropagation()
        $('.select-dropdown__list1').toggleClass('active');
        $('.select-dropdown__list').removeClass('active');
        $('.select-dropdown__list2').removeClass('active');
        $('.select-dropdown__list3').removeClass('active');
        $('.select-dropdown__button1 span').addClass('black1');

      });

      $(document).on("click", ".select-dropdown__list-item1", function () {
        var itemValue = $(this).data('value');

        $('.select-dropdown__button1 span').text($(this).text()).parent().attr('data-value', itemValue);
        $('.select-dropdown__list1').toggleClass('active');
      });

      $('.select-dropdown__button2').on('click', function (event) {
        event.stopPropagation()
        $('.select-dropdown__list2').toggleClass('active');
        $('.select-dropdown__list').removeClass('active');
        $('.select-dropdown__list1').removeClass('active');
        $('.select-dropdown__list3').removeClass('active');
        $('.select-dropdown__button2 span').addClass('black');
      });
      $(document).on("click", ".select-dropdown__list-item2", function () {
        var itemValue = $(this).data('value');

        $('.select-dropdown__button2 span').text($(this).text()).parent().attr('data-value', itemValue);
        $('.select-dropdown__list2').toggleClass('active');
      });
      $(document).on("click", ".select-dropdown__list-item1", function () {
        var itemValue = $(this).data('value');

        $('#select_region').val(itemValue);
      });
      $(document).on("click", ".select-dropdown__list-item2", function () {
        var itemValue = $(this).data('value');

        $('#select_interested').val(itemValue);
      });


      $('.select-dropdown__button3').on('click', function (event) {
        event.stopPropagation()
        $('.select-dropdown__list3').toggleClass('active');
        $('.select-dropdown__list').removeClass('active');
        $('.select-dropdown__list1').removeClass('active');
        $('.select-dropdown__list2').removeClass('active');
      });
      $(document).on("click", ".select-dropdown__list-item3", function () {
        var itemValue = $(this).data('value');

        $('.select-dropdown__button3 span').text($(this).text()).parent().attr('data-value', itemValue);
        $('.select-dropdown__list3').toggleClass('active');
      });

    });
    $(document).on("click", ".sidebar--careers .apply-btn", function () {
      $([document.documentElement, document.body]).animate({
        scrollTop: $("#grnhse_app").offset().top - 100
      }, 500);
    });
  });

}(jQuery));;
webpackJsonp([1], {
  105: function (e, t, o) {
    o(106), o(113), o(114), e.exports = o(115)
  },
  106: function (e, t, o) {
    "use strict";

    function r() {
      clearInterval(u);
      var e = this;
      setTimeout(function () {
        y.overlay.forEach(function (e) {
          w.currentColor && e.classList.remove(w.currentColor)
        }), w.currentColor = w[e.className.split(" ")[1]], y.overlay.forEach(function (t) {
          t != e && t.classList.add(w.currentColor)
        }), y.wrapper.classList.add(w.currentColor), e.parentNode.classList.add("splash__project--hovered"), y.project().forEach(function (e) {
          e.classList.add("active")
        }), e.parentNode.children[2].classList.add("active"), g.classList.add("branding--splash-hover"), y.slider.classList.add("slider--black"), y.slider.parentNode.classList.add("slider--black"), document.querySelector(".site-nav__list").classList.add("site-nav__list--red")
        if (document.querySelector(".languages-list")) { document.querySelector(".languages-list").classList.add("site-nav__list--red"); }
      }, 80)
    }

    function i() {
      // console.log("u = setInterval(y.autoScroll, 100);1")
      u = setInterval(y.autoScroll, 100);
      var e = this;
      setTimeout(function () {
        y.wrapper.classList.remove(w.currentColor), e.parentNode.classList.remove("splash__project--hovered"), y.project().forEach(function (e) {
          e.classList.remove("active")
        }), e.parentNode.children[2].classList.remove("active"), g.classList.remove("branding--splash-hover"), y.slider.classList.remove("slider--black"), y.slider.parentNode.classList.remove("slider--black"), document.querySelector(".site-nav__list").classList.remove("site-nav__list--red")
        if (document.querySelector(".languages-list")) { document.querySelector(".languages-list").classList.remove("site-nav__list--red"); }
      }, 80)
    }
    var s = o(46),
      n = function (e) {
        return e && e.__esModule ? e : {
          default: e
        }
      }(s),
      l = o(5);
    window.innerWidth >= 481 && window.innerHeight >= 481 && (document.querySelector(".branding").classList.add("branding--splash"));
    var a = 0,
      c = 4,
      d = null,
      u = void 0,
      h = window.innerWidth <= 481 || window.innerHeight <= 481,
      g = document.querySelector(".branding--splash"),
      p = document.querySelector(".branding--splash .branding__logo"),
      m = void 0,
      v = document.querySelector(".section--v-center").getBoundingClientRect().top + (0, l.getScrollTop)(),
      f = document.querySelector(".branding"),
      w = {
        design: "splash--red",
        experience: "splash--red",
        communication: "splash--red",
        currentColor: ""
      };
    window.SplashDragging = !1;
    var y = {
      // 选择类名为 .splash__wrapper 的元素，作为包装器
      wrapper: document.querySelector(".splash__wrapper"),
      // 选择类名为 .splash__scroll 的元素，用于滚动操作
      scroll: document.querySelector(".splash__scroll"),
      // 选择类名为 .splash 的元素，作为主界面元素
      self: document.querySelector(".splash"),
      // 定义一个方法，返回所有类名为 .splash__project 且不包含 .splash__project--hovered 类的元素
      project: function () {
        return document.querySelectorAll(".splash__project:not(.splash__project--hovered)")
      },
      // 选择所有类名为 .splash__img 的元素
      img: document.querySelectorAll(".splash__img"),
      // 选择所有类名为 .splash__overlay 的元素
      overlay: document.querySelectorAll(".splash__overlay"),
      // 选择类名为 .splash__projects--orig 的元素，作为原始项目容器
      orig: document.querySelector(".splash__projects--orig"),
      // 选择类名为 .slider 的元素，通常用于控制缩放
      slider: document.querySelector(".slider"),
      // 克隆标志，初始值为 1
      clone: 1,

      // 计算并返回 .splash 元素的宽度
      setSplashWidth: function () {
        // 根据未悬停的项目数量、窗口高度等计算宽度，并添加 3px 的额外宽度
        // console.log("宽度")
        // console.log(this.project().length)
        // console.log(window.innerHeight)
        // console.log(this.project().length * window.innerHeight * 1.5 * .9 / c / c + 3 + "px")
        return this.project().length * window.innerHeight * 1.31 * .9 / c / c + 3  + "px"
      },

      // 获取原始项目容器的宽度，并赋值给变量 a
      getScrollWidth: function () {
        this.orig = document.querySelector(".splash__projects--orig");
        a = this.orig.offsetWidth;
      },

      // 实现无限滚动功能
      infiniteScroll: function () {
        // console.log("无限滚动")
        // 当滚动位置超过原始容器宽度 + 1 时，将滚动位置重置为 1
        if (this.scrollLeft >= a + 1) {
          this.scrollLeft = 1;
        }
        // 当滚动位置小于等于 0 时，将滚动位置重置为原始容器宽度
        if (this.scrollLeft <= 0) {
          this.scrollLeft = a;
        }
      },

      // 处理缩放变化
      changeZoom: function () {
        // console.log("缩放")
        // 保存当前缩放值到 d
        d = c;
        // 获取滑块的值作为新的缩放值
        c = this.slider.value;
        // 如果缩放值在 1 到 17 之间，将其设置为 17
        if (c > 1 && c < 17) {
          c = 17;
        }
        // 对缩放值进行向上取整并除以 16
        c = Math.ceil(c / 16);
        // 根据缩放值添加或移除 .splash--zoom-4 类
        if (c === 4) {
          this.self.classList.add("splash--zoom-4");
        } else {
          this.self.classList.remove("splash--zoom-4");
        }
        // 设置 .splash 元素的宽度
        this.self.style.width = this.setSplashWidth();
        // 检查是否需要克隆项目容器
        this.tooWide();
        // 再次设置 .splash 元素的宽度
        this.self.style.width = this.setSplashWidth();
        // 设置每个项目的高度
        this.project().forEach(function (e) {
          e.style.height = 90 / c + "vh";
        });
        // 设置每个项目的宽度
        this.project().forEach(function (e) {
          e.style.width = 135 / c + "vh";
        });
        // 获取最新的滚动宽度
        this.getScrollWidth();
        // 打乱图像顺序并过滤项目
        S.shuffleImages();
        S.filterItems();
        // 向数据层推送事件
        window.dataLayer.push({ 'event': 'case_study_slider', 'case_study_slider_count': c });
      },

      // 自动滚动功能
      autoScroll: function () {
        // console.log("自动滚动")
        // 获取当前滚动位置
        var e = y.scroll.scrollLeft;
        // 将滚动位置增加 1  移动速度
        // y.scroll.scrollLeft = e + 1;
        y.scroll.scrollLeft = e + 1;
      },

      // 处理窗口大小变化事件
      resize: function () {
        // console.log("窗口大小变化")
        // 判断窗口宽度或高度是否小于等于 481px
        h = window.innerWidth <= 481 || window.innerHeight <= 481;
        // 根据判断结果添加或移除 .branding--splash 类
        if (h) {
          f.classList.remove("branding--splash");
        } else {
          f.classList.add("branding--splash");
        }
        // 选择类名为 .branding--splash 的元素
        g = document.querySelector(".branding--splash");
        // 选择类名为 .branding--splash 下的 .branding__logo 元素
        p = document.querySelector(".branding--splash .branding__logo");
        // 调用 b 对象的相关方法
        b.setBranding();
        b.removeBranding();
        // 检查是否需要克隆项目容器
        y.tooWide();
        // 设置 .splash 元素的宽度
        y.self.style.width = y.setSplashWidth();
        // 获取最新的滚动宽度
        y.getScrollWidth();
        // 获取 .section--v-center 元素相对于文档顶部的位置
        v = document.querySelector(".section--v-center").getBoundingClientRect().top + (0, l.getScrollTop)();
      },

      // 检查是否需要克隆项目容器
      tooWide: function () {
        var e;
        // 如果窗口宽高比大于原始容器宽高比，且克隆标志小于 2
        // console.log("检查是否需要克隆项目容器")
        // console.log(window.innerWidth)
        // console.log(y.orig.offsetWidth)
        // console.log(window.innerHeight)
        if (window.innerWidth / window.innerHeight > y.orig.offsetWidth / window.innerHeight) {
          if (this.clone < 2) {
            // 克隆原始容器并修改类名
            e = this.orig.cloneNode(true);
            e.classList.remove("splash__projects--orig");
            e.classList.add("splash__projects--clone2");
            // 将克隆的容器添加到 .splash 元素中
            this.self.appendChild(e);
            // 更新克隆标志
            this.clone = 2;
            // 初始化一个新的布局实例
            m = new n.default(".splash__projects--clone2", {
              itemSelector: ".splash__project",
              transitionDuration: "1s",
              layoutMode: "fitRows",
              getSortData: {
                order: "[data-order]"
              }
            });
          }
        } else if (this.clone === 2) {
          // 如果克隆标志为 2，移除克隆的容器并更新克隆标志
          var t = document.querySelector(".splash__projects--clone2");
          t.parentNode.removeChild(t);
          this.clone = 1;
        }
      }
    };
    y.self.style.width = y.setSplashWidth(), 
    y.self.style.marginLeft = 0, 
    y.scroll.scrollLeft = window.innerWidth / 4, 
    y.getScrollWidth(), 
    u = setInterval(y.autoScroll, 100), 
    // console.log("u = setInterval(y.autoScroll, 100);2")
    h && document.querySelector(".branding").classList.remove("branding--splash");
    var S = {
      rand: function (e, t) {
        return Math.floor(Math.random() * (t - e + 1)) + e
      },
      shuffleImages: function () {
        for (var e = 0; e < this.rand(1, 24); e++)
          for (var t = 0; t < this.imgSetOne.length; t++) {
            var o = this.rand(1, 24),
              r = this.imgSetOne[t],
              i = this.imgSetTwo[t],
              s = this.imgSetThree()[t];
            r.dataset.order = o, i.dataset.order = o, s && (s.dataset.order = o)
            // console.log(r),console.log(i),console.log(s)
          }
      },
      imgSetOne: document.querySelectorAll(".splash__projects--orig .splash__project"),
      imgSetTwo: document.querySelectorAll(".splash__projects--clone .splash__project"),
      imgSetThree: function () {
        return document.querySelectorAll(".splash__projects--clone2 .splash__project")
      },
      filterItems: function () {
        L.updateSortData(), _.updateSortData(), L.arrange({
          sortBy: "order"
        }), _.arrange({
          sortBy: "order"
        }), m && (m.updateSortData(), m.arrange({
          sortBy: "order"
        }))
      }
    };
    S.shuffleImages();
    var L = new n.default(".splash__projects--orig", {
      itemSelector: ".splash__project",
      transitionDuration: "1s",
      layoutMode: "fitRows",
      getSortData: {
        order: "[data-order]"
      }
    }),
      _ = new n.default(".splash__projects--clone", {
        itemSelector: ".splash__project",
        transitionDuration: "1s",
        layoutMode: "fitRows",
        getSortData: {
          order: "[data-order]"
        }
      }),
      b = {
        ogilvyRed: {
          r: 235,
          g: 63,
          b: 67
        },
        ogilvyBlack: {
          r: 0,
          g: 0,
          b: 0
        },
        speed: 1 / window.innerHeight / 1.5,
        red: function () {
          return this.ogilvyBlack.r
        },
        green: function () {
          return this.ogilvyBlack.g
        },
        blue: function () {
          return this.ogilvyBlack.b
        },
        width: 0,
        position: 0,
        margin: function () {
          return window.getComputedStyle(g).marginTop
        },
        newMargin: 0,
        setBranding: function () {
          var mem_class = document.querySelector(".branding__logo").classList;
          if (mem_class.contains("memac__logo")) {
            h || (this.updateBranding(), g.style.color = "var(--logo-scroll-color)", g.style.marginTop = "calc(-50px + var(--logo-scroll-margin))", g.style.transform = "translate3d(-50%, var(--logo-scroll-position), 0)", p.style.width = "calc(70vw - var(--logo-scroll-width))")
          } else {
            h || (this.updateBranding(), g.style.color = "var(--logo-scroll-color)", g.style.marginTop = "calc(-50px + var(--logo-scroll-margin))", g.style.transform = "translate3d(-50%, var(--logo-scroll-position), 0)", p.style.width = "calc(41vw - var(--logo-scroll-width))")
          }
        },
        removeBranding: function () {
          h && (document.querySelector(".branding").style.color = "", document.querySelector(".branding").style.marginTop = "", document.querySelector(".branding").style.transform = "", document.querySelector(".branding__logo").style.width = "")
        },
        updateBranding: function () {
          if (!h) {
            this.iefallback();
            var e = (0, l.getScrollTop)();
            this.red = this.ogilvyBlack.r + Math.floor(e * this.speed * this.ogilvyRed.r), this.green = this.ogilvyBlack.g + Math.floor(e * this.speed * this.ogilvyRed.g), this.blue = this.ogilvyBlack.b + Math.floor(e * this.speed * this.ogilvyRed.b), this.width = 1 + e * this.speed * 38, this.position = e * this.speed * -60, this.newMargin = -1 * this.position, this.red > this.ogilvyRed.r && (this.red = this.ogilvyRed.r), this.green > this.ogilvyRed.g && (this.green = this.ogilvyRed.g), this.blue > this.ogilvyRed.b && (this.blue = this.ogilvyRed.b), this.position <= -50 && (this.position = -50, this.newMargin = -1 * this.position), g.style.setProperty("--logo-scroll-color", "rgb(" + this.red + "," + this.green + "," + this.blue + ")"), g.style.setProperty("--logo-scroll-position", this.position + "%"), g.style.setProperty("--logo-scroll-margin", this.newMargin + "px"), p.style.setProperty("--logo-scroll-width", this.width + "vw")
          }
        },
        iefallback: function () {
          var e = (0, l.getScrollTop)();
          e >= v - window.innerHeight / 2 ? g.classList.contains("logo-hide") || g.classList.add("logo-hide") : g.classList.contains("logo-hide") && g.classList.remove("logo-hide"), e <= 100 && document.querySelector(".branding").classList.add("branding--splash"), e >= v ? f.classList.contains("branding--splash") ? f.classList.remove("branding--splash") : f.classList.contains("logo-hide") && f.classList.remove("logo-hide") : e >= v - window.innerHeight / 2 && (f.classList.contains("branding--splash") ? f.classList.contains("logo-hide") || f.classList.add("logo-hide") : f.classList.add("branding--splash"))
        }
      };
    b.setBranding(), 
    y.tooWide(),
    y.scroll.addEventListener("scroll", y.infiniteScroll), 
    y.slider.addEventListener("change", function () {
      this.value != c && y.changeZoom()
    }), y.slider.addEventListener("mousemove", function () { }), y.img.forEach(function (e) {
      e.addEventListener("mouseenter", r), e.addEventListener("mouseout", i), e.addEventListener("click", function (e) {
        window.SplashDragging && e.preventDefault()
      })
    }), document.querySelector(".slider__out--splash").addEventListener("click", function () {
      y.slider.value = 64, y.changeZoom()
    }), window.addEventListener("scroll", function () {
      b.updateBranding()
    }), window.addEventListener("resize", y.resize)
  },
  113: function (e, t, o) {
    "use strict";
    for (var r, i, s, n, l = "webkit moz ms o".split(" "), a = window.requestAnimationFrame, c = window.cancelAnimationFrame, d = 0; d < l.length && (!a || !c); d++) n = l[d], a = a || window[n + "RequestAnimationFrame"], c = c || window[n + "CancelAnimationFrame"] || window[n + "CancelRequestAnimationFrame"];
    var u;
    ! function (o, n) {
      i = [t], r = n, void 0 !== (s = "function" == typeof r ? r.apply(t, i) : r) && (e.exports = s)
    }(0, function (e) {
      var t, o, r, i, s, n = window,
        l = document,
        d = 0,
        h = [],
        g = function (e, g) {
          for (e = 0; e < h.length;) g = h[e++], g = g.container || g, g.removeEventListener("mousedown", g.md, 0), n.removeEventListener("mouseup", g.mu, 0), n.removeEventListener("mousemove", g.mm, 0);
          for (h = [].slice.call(l.getElementsByClassName("dragscroll")), e = 0; e < h.length;) ! function (e, h, g, p, m, v) {
            (v = e.container || e).addEventListener("mousedown", v.md = function (t) {
              e.hasAttribute("nochilddrag") && l.elementFromPoint(t.pageX, t.pageY) != v || (p = 1, h = t.clientX, g = t.clientY, r = i, t.preventDefault())
            }, 0), n.addEventListener("mouseup", v.mu = function (e) {
              p && (s && (d = (s - o) / (i - r), d *= 20, n.update(), s = null), p = 0), setTimeout(function () {
                window.SplashDragging = !1
              }, 50)
            }, 0), n.addEventListener("mousemove", v.mm = function (n) {
              p && (window.SplashDragging = !0, r = i, s = o, o = n.clientX, i = new Date, (m = e.scroller || e).scrollLeft -= t = -h + (h = n.clientX), e == l.body && ((m = l.documentElement).scrollLeft -= t))
            }, 0), n.update = function () {
              var t = e.scroller || e;
              d *= .94, t.scrollLeft += d, u = a(n.update), Math.abs(d) <= .5 && (d = 0, c(u))
            }
          }(h[e++])
        };
      "complete" == l.readyState ? g() : n.addEventListener("load", g, 0), e.reset = g
    })
  },
  114: function (e, t, o) {
    "use strict";
    var r = o(5),
      i = document.querySelector(".js-locker"),
      s = void 0,
      n = void 0,
      l = void 0,
      a = !1,
      c = function () {
        n = s.offsetHeight, l = i.offsetTop + n, a && (i.style.height = n + "px"), d()
      },
      d = function () {
        var e = window.innerHeight + (0, r.getScrollTop)();
        e < l && a ? (a = !1, i.style.height = "", i.classList.remove("is-locked")) : e >= l && !a && (a = !0, i.style.height = n + "px", i.classList.add("is-locked"))
      };
    i && (s = i.querySelector(".js-lockee"), c(), window.addEventListener("scroll", d), window.addEventListener("resize", c))
  },
  115: function (e, t, o) {
    "use strict";
    var r = o(1),
      i = function (e) {
        return e && e.__esModule ? e : {
          default: e
        }
      }(r),
      s = o(3),
      n = o(5),
      l = document.querySelector(".js-home2"),
      a = document.documentElement,
      c = void 0,
      d = void 0,
      u = void 0,
      h = void 0,
      g = void 0,
      p = void 0,
      m = void 0,
      v = void 0,
      f = !1,
      w = function () {
        var e = (0, n.getScrollTop)();
        p = l.offsetTop, m = window.innerHeight, v = e, L()
      },
      y = function () {
        a.style.overflow = "", window.removeEventListener("scroll", S)
      },
      S = function () {
        window.clearTimeout(g), g = setTimeout(y, 1e3)
      },
      L = function e() {
        var t = (0, n.getScrollTop)();
        if (t < p) {
          if (f || (c.style.opacity = "var(--work-scroll-opacity)", c.style.setProperty("--work-scroll-opacity", 0), s.TweenMax.set(h, {
            opacity: 0
          }), s.TweenMax.set(d, {
            opacity: 0
          }), f = !0), t + m > v) {
            var o = v - m,
              r = (t - o) / (p - o);
            c.style.setProperty("--work-scroll-opacity", r)
          }
        } else a.style.overflow = "auto", s.TweenMax.to(h, .2, {
          opacity: 1
        }), s.TweenMax.staggerFromTo(u, .3, {
          opacity: 0,
          y: 10
        }, {
          opacity: 1,
          y: 0
        }, .1), window.removeEventListener("scroll", e), window.removeEventListener("resize", w), g = setTimeout(y, 1e3), window.addEventListener("scroll", S)
      };
    l && (c = l.querySelector(".work__categories"), d = l.querySelectorAll(".js-work-item"), u = [].concat((0, i.default)(d)), u.sort(function (e, t) {
      return parseInt(e.style.order) - parseInt(t.style.order)
    }), h = l.querySelector(".section__grid-utilities"), w(), window.addEventListener("scroll", L), window.addEventListener("resize", w))
  },
  5: function (e, t, o) {
    "use strict";

    function r() {
      return window.getComputedStyle(document.body, ":after").getPropertyValue("content")
    }

    function i() {
      var e = document.documentElement;
      return (window.pageYOffset || e.scrollTop) - (e.clientTop || 0)
    }
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.getBreakpoint = r, t.getScrollTop = i
  }
}, [105]);
;
